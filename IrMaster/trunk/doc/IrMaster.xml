<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xdoc2html.xsl"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "dtds/document-v20.dtd">
<document>
  <header> 
    <title>IrMaster documentation</title>
  </header>
<body>
    <warning>Sending undocumented IR commands to
your equipment may damage or even destroy it. By using this program,
you agree to take the responsibility for possible damages yourself, and
not to hold the author responsible.</warning>
 <section>
      <title>Revision history</title>
      <table>
	<tr>
	  <th>Date</th><th>Description</th>
	</tr>
	<tr>
	  <td>2011-10-23</td>
	  <td>Initial version.</td>
	</tr>
	<tr>
	  <td>2012-04-14</td>
	  <td>Many minor fixes and updates for the upcoming 0.1.2. (version not published)</td>
	</tr>
	<tr>
	  <td>2012-04-24</td>
	  <td>Converted to the document format of Apache Forrest. The program
documentation is now generated from that file.</td>
	</tr>
        <tr>
	  <td>2012-06-03</td>
	  <td>Updated for upcoming version 0.2.0. blurb...</td>
	</tr>
      </table>
    </section>
<section>
<title>Introduction</title>
<p>This program is not a "program with a GUI",
nor is it a GUI for a particular program. Rather, it is a
"Meta program", offering a GUI for a number of IR related programs,
presently IrpMaster (advanced IR rendering program by myself),
Makehex (older IR rendering program), DecodeIR (tries to identify
an IR signal), and AnalyzeIR (which is my name of the Analyze-Function
of the ExchangeIR-Library). Future extensions to other, possibly not
yet written, programs are possible.</p>
<p>
Note that I have written two different programs with quite similar
names: IrMaster, the present one, a GUI, and Ir<strong>p</strong>Master, a
library and a command line program, an IR signal render, but without a
GUI. Please do not confuse.</p>
<p>
In the sequel, the word "the program" will denote either the "shell"
IrMaster, or the GUI together with its "clients" IrpMaster, Makehex,
AnalyzeIR, and DecodeIR, as is hopefully clear from the context.</p>
<p>
For someone with knowledge in the problem domain of IR signals and
their parameterization, this program is believed to be very simple to
use. This knowledge is assumed from the reader. Other can acquire that
knowledge either from the <a
 href="http://www.hifi-remote.com/wiki/index.php?title=Main_Page">JP1
Wiki</a>
or, e.g., <a href="http://www.sbprojects.com/knowledge/ir/index.php">this
link</a>.</p>
<p>
So what can this program do: From a data base of known IR signals
(essentially corresponding to the collected know-how of the community
in machine readable form) IR signals corresponding to certain parameter
values can be computed. Export files in different formats can be
generated, for usage of other programs. For this, two alternative
renders (my own IrpMaster as well as the older Makehex) are
available. By using the clipboard, IR signals in Pronto format (for
example from Internet articles) can be directly sent to the analyzers
AnalyzeIR and DecodeIR. (To my knowledge, no other program
presently allows this.) A computed signal can be sent proper hardware:
For investigating possible non-documented IR signals of owned
equipment, a "war dialer" can send whole parameter regions of IR
signals. For this, hardware support in the form of
GlobalCach√©, IRTrans, or LIRC is required. A simple calculator intended
for simple computations on IR signal timings is provided.</p>
<p>
Here is my <a href="TODO">TODO list</a>, with both minor improvements,
and
suggestions for major "sub-projects".</p>
<p>Note that the screen shots are included as illustrations only; they may not
depict the current program completely accurately.</p>

<section>
<title>Copyright and License</title>
<p>The program, as well as this document, is copyright by myself. My
copyright does not extend to the embedded "components" Analyze,
Makehex, and DecodeIR. Makehex was written by John S. Fine (see <a
 href="LICENSE_makehex.txt">LICENSE_makehex.txt</a>), and has been
translated to Java by Bengt Martensson. ExchangeIR was written by
Graham Dixon and published under <a
 href="http://www.gnu.org/licenses/gpl.html">GPL3 license</a>. Its
Analyze-function has been translated to Java by Bengt Martensson.
DecodeIR was originally written by John S. Fine, with later
contributions from others. It is free software with undetermined
license. IrpMaster depends on the run time functions of ANTLR3, which
is <a href="http://www.antlr.org/license.html">free software with BSD license</a>.</p>
<p>
The "database file" IrpProtocols.ini is derived from <a
href="http://www.hifi-remote.com/wiki/index.php?title=DecodeIR">DecodeIR.html</a>, thus I do not claim copyright.
</p>
<p>The Windows installer was built with <a
href="http://www.jrsoftware.org/isinfo.php">Inno Setup</a>, which is <a
href="http://www.jrsoftware.org/files/is/license.txt">free software</a> by
<a
href="http://www.jrsoftware.org">Jordan Russel</a>.  To modify the user's path in Windows, the Inno extension <a
href="http://legroom.net/software/modpath">modpath</a> by <a href="http://www.legroom.net/">Jared Breland</a>, distributed under
the <a href="http://www.gnu.org/licenses/lgpl.html">GNU Lesser General Public
License (LGPL), version 3</a>.</p>


<p>
The program and its documentation are licensed under the <a
 href="http://www.gnu.org/licenses/gpl.html">GNU General Public License version
3</a>, making everyone free to use, study, improve, etc., under certain
conditions.</p>
      </section>
 
    </section>

<section>
<title>Installation</title>
<section>
<title>General</title>
<p>IrMaster, and all but one of its third-party additions, are written in Java,
which means that it should run on every computer with a modern Java installed;
Windows, Linux, Macintosh, etc. Java 1.6 or later is required. The one
exception is DecodeIR, which is written in C++, and invoked as a shared library
(<code>.dll</code> in Windows, <code>.so</code> in Linux, etc). If DecodeIR is
not available on your platform this is not a major problem, as IrMaster will
work fine without it, just DecodeIR-related functions will be unavailable.</p>

<p>There is unfortunately no good <code>make install</code> or such in
the source distribution, so also source code distribution users are recommended
to install the binary distribution. Also, all necessary third-party components
are included in the binary distribution.</p>

<p>Both under Windows as well as under other operating systems, IrMaster (and
IrpMaster) behave civilized, in that they do not write in the installation
directory after the initial installation. In both cases (in contrast to the
source distribution), the distribution contains everything needed including third
party libraries like DecodeIR, AnalyzeIR, MakeHex (Java version) and its
irp-files.
</p>
<p>Under Windows, the properties are stored in
<code><![CDATA[%LOCALAPPDATA%\IrMaster\IrMaster.properties.xml]]></code> using Windows
Vista and later (on my Windows 7 system, this is <code>%HOME%\AppData\Local\IrMaster\IrMaster.properties.xml</code>), otherwise in
<code>%APPDATA%\IrMaster\IrMaster.properties.xml</code>. Using other operating
systems, it is stored under <code>$HOME/.irmaster.properties.xml</code>. It is
not deleted by  uninstall. (If weird problems appear when updating, try
deleting this file.)</p>
      </section>
<section><title>Windows</title>
<p>Download the <a
href="http://www.harctoolbox.org/downloads/IrMaster.exe">Window setup
file</a>, save, and double click. Accept the license. Select any installation
directory you like; suggested is <code>C:\Program Files\IrMaster</code>. Unless 
reason to do so, create the start menu folder, the desktop icon, and allow the
program to add the application directory to your path (for IrpMaster as command
line program). Administrator rights are probably needed, at least if you are
installing in a directory like <code>Program Files</code>. (The <em>should</em> not be
needed otherwise, but Windows Vista and later are always good for a surprise...)
IrMaster can now be started from <code>Start -> IrMaster ->
IrMaster</code>, or from the desktop icon.</p>

<p>To uninstall, select the uninstall option from the Start menu. Very pedantic
people may like to delete the properties file too, see above.</p>
</section>
<section><title>Other systems (Linux etc)</title>
<p>Create an installation directory (suggestion;
<code>/usr/local/irmaster</code>, and unpack <a
href="http://www.harctoolbox/downloads/IrMaster-bin.zip">the current binary distribution</a> into
it. Examine the wrapper <code>irmaster.sh</code>, and make desired changes to
it with your favorite text editor. Then make two symbolic links from a directory
in the path (suggestion; <code>/usr/local/bin</code> to the newly installed
<code>irmaster.sh</code>, using the names <code>irmaster</code> and <code>irpmaster</code>. Example (using the suggested directories)</p>
<source>
cd /usr/local/bin
ln -s ../irmaster/irmaster.sh irmaster
ln -s ../irmaster/irmaster.sh irpmaster
</source>
<p>(<code>su</code> (or <code>sudo</code>) may be necessary to install in the
desired locations.)</p>
<p>To uninstall, just delete the files. Very pedantic
people may like to delete the properties file too, see above.</p>
</section>
<section>
<title>Wrapper for IRPMaster</title>
<p>Both under Windows and Unix-like systems, a wrapper for the command line
program <a href="IrpMaster.html">IrpMaster</a> is installed. The user can simply open a command window
(called anything like "xterm", "Terminal", "Shell", "DOS-Box", "cmd",...) and
in that command window can call the program IrpMaster by simply typing
<code>irpmaster</code>, followed by its arguments. See the screen shot below,
that shows the  generation of the Pronto form of a NEC1 signal for device 12,
subdevice 34, command number 56, 
together with subsequent invocation of DecodeIR on the computed result. (The
output on non-windows system is entirely similar.)
<img alt="IrpMaster invoked from the command line in Windows" src="images/irpmaster-windows.png"/></p>
</section>
</section>
<section>
<title>Usage</title>
<p>As stated previously, for anyone familiar with the problem domain, this
program is believed to be easy to use. Almost all user interface
elements have toolhelp texts. In what follows, we will not attempt to
explain every detail of the user interface, but rather concentrate on the
concepts. Furthermore, it is possible that new elements and functionality has
been implemented since the documentation was written.</p>
<p>
This program does not disturb the user with a number of
annoying, often <a
 href="http://www.bengt-martensson.de/misc/modal.html">modal</a>,
pop ups, but directs errors, warnings, and status outputs to the <em>console window</em>,
taking up the lower third of the main window. There is a context menu for the
console, accessible by pressing the right mouse button in it.</p>
<p>In the upper row, there are four pull-down menus, named File,
Edit, Options, and Help. Their usage is believed to be self explanatory, with
the exception of the entries in the Options menu. The latter mimics the Options
subpane, and are explained later.</p>

<p>
The main window is composed of presently four sub panes denoted
by "IR Protocols", Output HW", "IRCalc", and "Options" respectively. These 
will be discussed now.</p>
<section>
<title>The "IR Protocols" pane</title>
<p>In the upper third of this pane, a render program (IrpMaster or
Makehex) can be selected, together with the IR protocol identified by
name, and the parameters D ("device", in almost all protocols), S
("sub-device", not in all protocols), F ("function", also called
command number or obc, present in almost all protocols), as well as "T", toggle
(in general 0 or 1, only in a few protocols). These number can be entered as
decimal numbers, or, by prepending "0x", as hexadecimal numbers. Note that the supported
protocols are different between the different rendering engines. Not
all possibilities of IrMaster are available  when using the simpler
render Makehex.</p>
<p>
The lower two thirds of the window is occupied by another pane setup,
consisting of the sub-panes "Analyze", "Export", and "War dialer".</p>
<section>
<title>The "Analyze" pane</title>
<p><img alt="The analyze pane" src="images/analyze.png"/></p>
<p>By pressing "Render", the signal is computed, and the middle window is
filled with the Pronto representation of it. Pressing "Decode" sends
the Pronto representation to DecodeIR. Pressing "Analyze" sends it to
AnalyzeIR. In both cases, the programs will send their output to the
console window, as can be seen below.</p>
<p><img  alt="Decoded and analyzed signal" src="images/decoded_analyzed.png"/></p>
<p>Using context menus, the result can be sent to the clipboard or saved
to a file, after invoking a file selector. It is also possible to fill
the code window from the clipboard, or to import a file ict-format, for
example from the <a
 href="http://www.hifi-remote.com/wiki/index.php?title=IR_Scope_and_IR_Widget_User%27s_Guide">IRScope-Program</a>.
Note that an ICT file produce by IRScope may contain several IR signals, which
cannot be easily separated. They will be imported as one giant signals, with
all the gaps and spaces concatenated together. This is a flaw in the IRScope
program.
</p>
<p>
The left part of the middle window allows for sending the code in the
code window to hardware, presently GlobalCach√©, IRTrans, and LIRC
(requires <a href="http://www.harctoolbox.org/lirc_ccf.html">a patch</a>), 
any number of times the user desires. These run in their own
threads, and can be stopped anytime. </p>
<p>
<strong>Important:</strong> In all cases,
DecodeIR/Analyze operates on the actual Pronto code in the
middle window, which may even be manually manipulated by the
(sufficiently knowledgeable :-) user. Presently, there is no
possibility
to short-circuit directly from the signal rendering to
decoding/analyzing. 
<!--However, in contrast the sending function is
short-circuiting: If the code window is empty, the render is invoked
directly. -->
Also note that transforming the signal to
the Pronto format may introduce some rounding errors causing DecodeIR
to fail to indicate some IR signals it would otherwise identify.</p>
    </section>
<section>
<title>The Export pane</title>
<p><img alt="Export pane"  src="images/export.png"/></p>
<p>Using the export pane, export files can be generated. These allow e.g.
other programs to use the computed results. Using IrpMaster, exports
can be generated in text files, XML files, and LIRC-format, the first two both
in Pronto format and in 
"raw" format (timings in 
microseconds, positive for pulses, negative for gaps). The LIRC-exports are in
lirc.conf-format using the raw format. They can be concatenated together and
used as the LIRC server 
data base, typically <code>/etc/lirc/lircd.conf</code>. Of courses, they can
also be used with <a
href="http://winlirc.sourceforge.net/">WinLirc</a>. Optionally, for 
protocols with toggles, both toggle pairs may optionally be included in
the export file by selecting the "Generate toggle pairs"-option. Export file
names are either user selected from a file 
selector, or, if "Automatic file names" has been selected,
automatically generated.</p>

<p>The export is performed by pressing the "Export" button. The "..."-marked
button allows for manually selecting the export directory. It is recommended to
create a new, empty directory for the exports. The just-created export file can
be immediately inspected by pressing the "View Export"-button, which will open
it in the "standard way" of the used operating system. The "Open" button
similarly opens the operating systems standard directory browser (Windows
Explorer, Konquistador, Nautilus,...) on the export directory.</p>
    </section>
<section>
<title>The "War Dialer" pane</title>
<p><img alt="War dialer pane"  src="images/war_dialer.png"/></p>
<p>This functionality is intended for the search for undocumented IR
commands for customer equipment. It allows for sending a whole interval
of IR signals to the equipment, and taking notes when something reacts
on the sent signal. The "Start" and "Stop" functions are probably self
explaining; the "Pause" button allows for interrupting and later resuming, but
is presently not implemented. A 
note-taking function is planned but presently not implemented: when "Edit" is
pressed, a "Document" 
pops up with current IR signal and time, allowing the user to write a
note on that signal, which can later be saved by "Save".</p>
	</section>
      </section>
      <section>
<title>The "Output HW" pane</title>
<p>The sub-panes of this pane allows for the selection and configuration
of the employed IR hardware.</p>
<section>
<title>The "GlobalCache" pane.</title>
<p>This allows for configuring GlobalCach√© support. The
Discover-button attempts to find the identifying beacon of
GlobalCach√© modules (only present on recent firmware). If
successful,
will fill in the IP-Box, its model, the default IR-module and IR-port
(see <a
 href="http://www.globalcache.com/files/docs/API-GC-100.pdf">the
GlobalCach√© API specification</a> for the exact meaning of these
terms). In any case, the IP Name/address window, the module and port
selection can be changed manually. The Browse-button directs the
selected browser to the built-in WWW-server of the module, while the
"Stop IR"-Button allows the interruption of ongoing transmission,
possibly initiated from another source.</p>
<p><img alt="GlobalCach√© configuration pane" src="images/globalcache.png"/></p>
	</section>
	  <section>
	    <title>The "LIRC" pane</title>
<p>To be fully usable for IrMaster, the LIRC server has to be extended to be
able to cope with CCF signal not residing in the local data base, but sent from
a client like IrMaster, thus mimicing the function of e.g. a
GlobalCach√©. The needed modification ("patch") is in detail described <a
href="http://www.harctoolbox.org/lirc_ccf.xml">here</a>. However, even without
this patch, the configuration page can be used to send the predefined commands
(i.e. residing it its data base <code>lirc.conf</code>). It can be considered
as a GUI version of
the <a href="http://www.lirc.org/html/irsend.html"><code>irsend</code>
command</a>.</p>
<p>The LIRC server needs to be started in network listening mode with
the <code>-l</code> or <code>--listen</code> option. Default TCP port is
8765.</p>
<p>After entering IP-Address or name, and port (stay with 8765 unless a reason
to do otherwise), press the "Read" button. This will query the LIRC server for
its version (to replace the grayed out "&lt;unknown&gt;" of the virgin
IrMaster), and its known remotes and their commands. Thus, the "Remote" and
"Command" combo boxes should now be selectable. After selecting a remote and one
of its command, it can be sent to the LIRC server by pressing the "Send"
button. If (and only if) the LIRC server has the above described patch applied,
selecting "LIRC" on the "Analyze" and "War Dialer" panes now works. </p>
<p><img alt="LIRC configuration pane" src="images/hw_lirc.png"/></p>
<p>Due to LIRC's pecular form of API stop command, the "Stop IR" command
presently does not work. See <a
href="http://sourceforge.net/mailarchive/forum.php?thread_name=461617A4.4000404%40bengt-martensson.de&amp;forum_name=lirc-list">this
thread</a> in the LIRC mailing list for a background.</p>
	  </section>
	  <section>
	    <title>The "IRTrans" pane</title>
<p>
The configuration of IRTrans is similar to LIRC, so it will be described
more briefly.</p>
<p>Enter IP name or -address and select an IR port (default "intern"). If the
Ethernet IRTrans contains an "IR Database" (which is a slightly misleading term
for an internal flash memory, that can be filled by the user), its commands can
be sent from this pane. By pressing the "Read" button, the known remotes and
commands are loaded, and the version of the IRTrans displayed. The selected
command can now be sent by the "Send" button. (However, this
functionality is otherwise not used by IrMaster.) Selecting
"IRTrans" on the "Analyze" and "War dialer" pane should now work. The IRTrans
module is then accessed using the UDP text mode.</p>

<p><img alt="IRTrans configuration pane" src="images/hw_irtrans.png"/></p>
	</section>
      </section>
      <section>
<title>The IRCalc pane</title>
<p>This pane allows for some often reoccurring interactive computations.</p>

<p>The left hand side computes, for a number given in first row either as
decimal or hexadecimal its (one-) complement (in 8,  16, or 32  bits), its
"reverse" 
(<code>java.lang.Integer.reverse()</code>: the value obtained by reversing the
order of the bits in the two's complement binary representation of the
specified int value). Furthermore, the EFC and EFC5 functions of the JP1-world
are computed, together with their inverses.</p>

<p>The right hand side computes, for a carrier frequency given either in
Hz or as a Pronto code (i.e., the second number in the CCF), either the time for a
given number of periods (entered as decimal or hexadecimal), or the number of
periods as a function of the time entered.</p>



<p><img alt="IRCalc pane" src="images/ircalc.png"/></p>
    </section>
<section>
<title>The Options pane</title>
<p><img alt="The Options pane" src="images/options.png"/></p>
<p>This allows for selecting some parameters crucial for the operation of
the program. Of the parameters displayed above, note that "debug code"
and "verbose" are not properties in the sense that they are saved in
the properties file, while the others are.</p>

<p>The option "disregard repeat mins" is described in the <a
href="IrpMaster.html#Preventing+intro+sequence+in+repeat+sequence">IrpMaster documentation</a>.</p>
    </section>
<section>
<title>Command line arguments</title> 
<p>Normal usage is just to double click on the jar-file, or possibly on
some wrapper invoking that jar file. However, there are some command
line arguments that can be useful either if invoking from the command
line, or in writing wrappers, or when configuring custom commands in
Windows. </p>

<source>
<![CDATA[Usage:
        irmaster [-v|--verbose] [-d|--debug debugcode] [-p|--properties propertyfile] [--version|--help]
or
        irmaster IrpMaster <IrpMaster-options-and-arguments>
]]></source>
<p>
The options <code>--version</code> and <code>--help</code> work as they are
expected to work in the <a
 href="http://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html#Command_002dLine-Interfaces">GNU
coding standards for command line interfaces</a>: The <code>-v/--verbose</code>
option set the verbose flag, causing commands like sending to IR
hardware printing some messages in the console. The debug option
<code>-d/--debug</code>
takes an argument, and the result is stuffed into the debug parameter
in the program. This is passed to invoked programs that are free to
interpret it any way it likes. For example, <a
 href="IrpMaster.html#Debugging+possibilities">here</a> is how IrpMaster
interprets the debug variable. This option is likely of interest only
to developers, who have to look in the code to see what is sensible.</p>

<p>The second form invokes IrpMaster as a the command line program  on the rest
of the arguments. It is a convenience feature for just having one user entry
point 
in the distributed jar file.</p>
      </section>
    </section>
    <section>
<title>References</title>
<ol>
  <li><a href="IrpMaster.html">IrpMaster</a>. Also a GPL3-project by
myself. Much harder 
to read than the present document :-). See also <a
 href="http://www.hifi-remote.com/forums/viewtopic.php?t=13396">this
discussion thread</a> in the JP1 forum.</li>
  <li>The <a href="http://www.harctoolbox.org">Harctoolbox project</a>,
also a GPL3-project by myself. It is used for the interface to
GlobalCach√© and IrTrans, as well as some minor support routines, that I
did not feel for duplicating.</li>
	<li id="DecodeIR"><a
 href="http://www.hifi-remote.com/forums/dload.php?action=file&amp;file_id=9980">DecodeIR</a>. This
shared library tries to identify protocol name and parameters of an IR signal
in raw form. Thus, it is in a sense, it implements the "inverse mapping" of
IrpMaster.</li> 

 <li><a href="http://www.globalcache.com">GlobalCach√©</a>,
a manufacturer of Ethernet connected IR hardware. Note that I have only tried
with the <a href="http://www.globalcache.com/products/gc-100/">GC-100
series</a>, but the IR sending models of the<a
href="http://www.globalcache.com/products/itach/models2/">iTach family</a> are
believed to work too. (Feel free to send me one :-).)</li>
  <li><a href="http://www.irtrans.com">IRTrans</a>, another
manufacturer of Ethernet connected IR-hardware. The <a
 href="http://www.irtrans.com/en/shop/lan.php">"IRTrans Ethernet"
module</a>, preferably with "IRDB Option" (internal flash memory), is
directly supported by the current software.</li>
  <li><a href="http://www.lirc.org">LIRC, Linux InfraRed Control</a>
This project contain drivers for almost everything IR-related. The present
project is able to use a <a href="lirc_ccf.html">modified LIRC-server</a> for transmitting IR signals.</li>
</ol>
    </section>
  </body>
</document>
