<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Copying and distribution of this file, with or without modification,
     are permitted in any medium without royalty provided the copyright
     notice and this notice are preserved.  This file is offered as-is,
     without any warranty.
-->

<!-- Note: This file is for IrMaster only; it is not compatible with IrScrutinizer. -->

<!--

This file serves as an example on how to use the XML export from IrMaster
to relatively easily generate new output formats. Here we, mostly as an example,
generates C code from the XML file. Although possibly useful as-is, it is intended
as an example, not as a productive solution.

Author: Bengt Martensson

-->
<exportformats>
<exportformat name="C" extension="c" multiSignal="true" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" />

    <xsl:template match="/protocol">
        <xsl:text>/* This file was automatically generated by irpxml2c.xsl */

const int frequency = </xsl:text>
<xsl:value-of select="@frequency"/><xsl:text>;
</xsl:text>
<xsl:text>const char *protocol = "</xsl:text><xsl:value-of select="@name"/><xsl:text>";
</xsl:text>
<xsl:text>const int intro_burst_length = </xsl:text><xsl:value-of select="count(signal[position()=1]/raw/intro/flash)"/>
<xsl:text>;
const int repeat_burst_length = </xsl:text><xsl:value-of select="count(signal[position()=1]/raw/repeat/flash)"/>
<xsl:text>;
const int ending_burst_length = </xsl:text><xsl:value-of select="count(signal[position()=1]/raw/ending/flash)"/>
<xsl:text>;

</xsl:text>
        <xsl:apply-templates select="signal" mode="pronto"/>

        <xsl:apply-templates select="signal" mode="raw"/>
    </xsl:template>

    <xsl:template match="signal" mode="pronto">
<xsl:text>/* Signal D = </xsl:text>
        <xsl:value-of select="@D"/>
        <xsl:text>; S = </xsl:text>
        <xsl:value-of select="@S"/>
        <xsl:text>; F = </xsl:text>
        <xsl:value-of select="@F"/>
        <xsl:text> */
const char *pronto_</xsl:text>
        <xsl:value-of select="/protocol/@name"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="@D"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="@S"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="@F"/>
        <xsl:text> = "</xsl:text>
        <xsl:value-of select="pronto"/>
        <xsl:text>";
</xsl:text>
    </xsl:template>

    <xsl:template match="signal" mode="raw">
       <xsl:text>const int raw_</xsl:text>
        <xsl:value-of select="/protocol/@name"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="@D"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="@S"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="@F"/>
        <xsl:text>[] = { </xsl:text>
        <xsl:apply-templates select="raw"/>
        <xsl:text> };
</xsl:text>
    </xsl:template>

    <xsl:template match="raw">
        <xsl:apply-templates select="*/*"/>
    </xsl:template>

    <xsl:template match="flash"><xsl:value-of select="."/><xsl:text>,</xsl:text></xsl:template>

     <xsl:template match="raw/*[position()=last()]/gap[position()=last()]"><xsl:text>-</xsl:text><xsl:value-of select="."/></xsl:template>
     <xsl:template match="gap"><xsl:text>-</xsl:text><xsl:value-of select="."/><xsl:text>,</xsl:text></xsl:template>

</xsl:stylesheet>
</exportformat>

<exportformat name="Lintronic" extension="txt" multiSignal="false" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" />

    <xsl:template match="/protocol">
        <xsl:text>Pulse, Pause in micro-seconds
</xsl:text>
<xsl:apply-templates select="signal[position()=1]"/>
    </xsl:template>

  

    <xsl:template match="signal">
     
        <xsl:apply-templates select="raw"/>
    </xsl:template>

    <xsl:template match="raw">
        <xsl:apply-templates select="*/*"/>
    </xsl:template>

    <xsl:template match="flash"><xsl:value-of select='format-number(number(.),"00000")'/><xsl:text>,</xsl:text></xsl:template>
     <xsl:template match="gap"><xsl:text></xsl:text><xsl:value-of select='format-number(number(.),"00000")'/><xsl:text> = </xsl:text><xsl:value-of select='format-number(number(.)+number(preceding-sibling::flash[1]), "00000")'/><xsl:text>
</xsl:text></xsl:template>

</xsl:stylesheet>
</exportformat>


<exportformat name="IRTrans" extension="rem" multiSignal="true" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" />

    <xsl:template match="/protocol">
        <xsl:text>[REMOTE]
 [NAME]ccf_</xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>

[COMMANDS]
</xsl:text>
        <xsl:apply-templates select="signal"/>
    </xsl:template>
  
    <xsl:template match="signal">
      <xsl:text> [</xsl:text>
      <xsl:for-each select="@*">
        <xsl:value-of select="name(.)"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="."/>
        <xsl:if test="position()!=last()">
          <xsl:text>,</xsl:text>
        </xsl:if>
        </xsl:for-each>
      <xsl:text>][CCF]</xsl:text>
      <xsl:value-of select="pronto"/>
      <xsl:text>
</xsl:text>
    </xsl:template>

</xsl:stylesheet>
</exportformat>

<exportformat name="CCF remote" extension="xml" multiSignal="true" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="xml" indent="yes"/>

    <xsl:template match="/protocol">
      <remote>
        <protocol>
         <xsl:attribute name="name"><xsl:value-of select="@name"/></xsl:attribute> 
        <xsl:apply-templates select="signal"/>
      </protocol>
</remote>
    </xsl:template>

    <xsl:template match="signal">
      <button>
        <xsl:attribute name="name"><xsl:value-of select="../@name"/><xsl:text>_</xsl:text><xsl:value-of select='format-number(@F,"000")'/></xsl:attribute>
<xsl:attribute name="D"> <xsl:value-of select="@D"/></xsl:attribute>
<xsl:attribute name="S"> <xsl:value-of select="@S"/></xsl:attribute>
<xsl:attribute name="F"> <xsl:value-of select="@F"/></xsl:attribute>
<xsl:apply-templates select="pronto"/>
<xsl:text>
</xsl:text>
</button>
    </xsl:template>

    <xsl:template match="pronto">
      <ccf><xsl:value-of select="."/></ccf>
    </xsl:template>
</xsl:stylesheet>
</exportformat>

<exportformat name="GlobalCache" extension="txt" multiSignal="true" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" />

    <xsl:param name="sendcommand">sendir</xsl:param>
    <xsl:param name="connectoraddress">2:1</xsl:param>
    <xsl:param name="id">123</xsl:param>
    <xsl:param name="count">1</xsl:param>
    <xsl:param name="frequency" select="/protocol/@frequency"/>

    <xsl:template match="/protocol">
        <xsl:text># Global Cache commands for some </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text> signals, all using id=</xsl:text>
        <xsl:value-of select="$id"/>
        <xsl:text>, count=</xsl:text>
        <xsl:value-of select="$count"/>
        <xsl:text>, and connector address=</xsl:text>
        <xsl:value-of select="$connectoraddress"/>
        <xsl:text>.
</xsl:text>
        <xsl:apply-templates select="signal"/>
    </xsl:template>
  
    <xsl:template match="signal">
      <xsl:text># Command for </xsl:text>
      <xsl:for-each select="@*">
        <xsl:value-of select="name(.)"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="."/>
        <xsl:text> </xsl:text>
        </xsl:for-each>
      <xsl:text>
</xsl:text>
      <xsl:value-of select="$sendcommand"/><xsl:text>,</xsl:text>
      <xsl:value-of select="$connectoraddress"/><xsl:text>,</xsl:text>
      <xsl:value-of select="$id"/><xsl:text>,</xsl:text>
      <xsl:value-of select="$frequency"/><xsl:text>,</xsl:text>
      <xsl:value-of select="$count"/><xsl:text>,</xsl:text>
      <xsl:apply-templates select="raw/intro"/>
      <xsl:apply-templates select="raw/repeat"/>
      <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="intro">
      <xsl:value-of select="count(*)+1"/>
      <xsl:apply-templates select="*"/>
    </xsl:template>

    <xsl:template match="repeat">
      <xsl:apply-templates select="*"/>
    </xsl:template>

    <xsl:template match="flash|gap">
      <xsl:text>,</xsl:text>
      <xsl:value-of select='round(number(.)*$frequency div 1000000)'/>
    </xsl:template>

</xsl:stylesheet>
</exportformat>

<exportformat name="TV B Gone" extension="c" multiSignal="false" simpleSequence="false">
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="text" />

    <xsl:template match="/protocol">
        <xsl:text>const struct powercode xCode PROGMEM = {
   freq_to_timerval(</xsl:text>
        <xsl:value-of select="@frequency"/>
        <xsl:text>),
   {
</xsl:text>
        <xsl:apply-templates select="signal[position()=1]"/>
        <xsl:text>   }
};
</xsl:text>
    </xsl:template>

    <xsl:template match="signal">     
    <xsl:apply-templates select="raw/*/*"/>
    </xsl:template>

    <xsl:template match="flash">
      <xsl:text>      { </xsl:text>
      <xsl:value-of select="round(number(.) div 10)"/>
      <xsl:text>, </xsl:text>
     </xsl:template>

    <xsl:template match="gap">
      <xsl:value-of select="round(number(.) div 10)"/>
      <xsl:text> },
</xsl:text>
     </xsl:template>

</xsl:stylesheet>
</exportformat>

</exportformats>
